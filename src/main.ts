/**
 * Script generated by ChatGPT
 */

import { createActor } from 'xstate'
import { createBrowserInspector } from '@statelyai/inspect';
import agents from './actors'

const { inspect } = createBrowserInspector();

const agentSelect = document.getElementById('agents');
const invokeAgentButton = document.getElementById('invokeAgentButton');
const messagesDiv = document.getElementById('chatMessages');
const updatesDiv = document.getElementById('stateUpdates');
const inspectCheckbox = document.getElementById('inspectCheckbox');
const messageInput = document.getElementById('messageInput');
const sendButton = document.getElementById('sendButton');

// The new textarea for editing agent config
const agentConfigInput = document.getElementById('agentConfigInput');

let currentAgent = null;

// Function to append a message to the messages div
function appendMessage(message) {
  const messageElement = document.createElement('div');
  messageElement.textContent = message;
  messagesDiv.appendChild(messageElement);
}

// Function to append a update to the updates divv
function appendUpdate(message) {
  const messageElement = document.createElement('div');
  messageElement.textContent = message;
  updatesDiv.appendChild(messageElement);
}

// Function to clear messages
function clearMessages() {
  messagesDiv.innerHTML = '';
}

// Clear existing options to prevent duplicates, then populate the <select>
agentSelect.innerHTML = '<option value="">-- Select an Agent --</option>';
for (const agent of Object.keys(agents)) {
  const option = document.createElement('option');
  option.value = agent;
  // The ID is in agent config: agents[agent][0].config.id
  option.textContent = agents[agent][0].config.id;
  agentSelect.appendChild(option);
}

// When user selects an agent, show the default config in JSON form
agentSelect.addEventListener('change', () => {
  const agentKey = agentSelect.value;
  if (agents[agentKey] && agents[agentKey][1]) {
	agentConfigInput.value = JSON.stringify(agents[agentKey][1], null, 2);
  } else {
	// If no default config is defined, just clear the textarea
	agentConfigInput.value = '';
  }
});

// Emit user messages on Enter key
messageInput.addEventListener('keypress', (event) => {
  if (event.key === 'Enter') {
	const message = messageInput.value.trim();
	if (message && currentAgent) {
	  appendMessage('Human: ' + message);
	  currentAgent.send({ type: 'USER_MESSAGE', payload: message });
	  messageInput.value = ''; // Clear the input field
	}
	event.preventDefault(); // Prevent default form submission
  }
});

// Invoke the selected agent when button is clicked
invokeAgentButton.addEventListener('click', () => {
  const agentKey = agentSelect.value;
  if (agents[agentKey]) {
	let updatedProps;
	try {
	  // Attempt to parse the user-edited JSON config
	  updatedProps = agentConfigInput.value.trim()
		? JSON.parse(agentConfigInput.value.trim())
		: {};
	} catch (error) {
		appendUpdate('Error: Invalid JSON in the agent configuration.');
	  return;
	}

	// Add any default config that might not have been defined by user
	const finalOptions = { ...updatedProps };
	console.log(finalOptions)

	// If user wants to inspect with Stately
	if (inspectCheckbox.checked) {
	  finalOptions.inspect = inspect;
	}

	// Create and start the agent
	currentAgent = createActor(agents[agentKey][0], finalOptions);
	clearMessages(); // Clear old messages
	appendUpdate(`Agent Invoked: ${agents[agentKey][0].config.id}`);

	// Subscribe to agent events
	currentAgent.on('*', (event) => {
	  appendMessage(`Agent Message: ${JSON.stringify(event.data)}`);
	});

	currentAgent.subscribe((snapshot) => {
	  if (snapshot.status === 'done') {
		appendUpdate(`Agent Done: ${JSON.stringify(snapshot.output)}`);
		console.log('Context', snapshot.context);
	  } else {
		appendUpdate(`Progress: ${JSON.stringify(snapshot.value)}...`);
	  }
	});

	currentAgent.start();

	// Enable sending messages
	messageInput.disabled = false;
	sendButton.disabled = false;
  } else {
	messageInput.disabled = true;
	sendButton.disabled = true;
	appendMessage('No agent selected.');
  }
});

// Emit user messages to the server
sendButton.addEventListener('click', () => {
  const message = messageInput.value.trim();
  if (message && currentAgent) {
	appendMessage(`You: ${message}`);
	currentAgent.send({ type: 'USER_MESSAGE', payload: message });
	messageInput.value = ''; // Clear the input field
  }
});

// Initial status message
appendUpdate('Connected to the server.');